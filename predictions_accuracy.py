# -*- coding: utf-8 -*-
"""Predictions accuracy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19OhacQF5lTNyJADFwpRPDKoD57TFrgEb
"""

from google.colab import drive
drive.mount("/content/drive/", force_remount=True)

import os
os.chdir(r"/content/drive/My Drive/McGill/Winter 2020/MAIS 202 Bootcamp/Final Project")

!pwd

pip install textdistance

import json
from textdistance import jaro_winkler

"""# Loading correct_answrs, answr_predictions0-4

- all dictionaries of length 2607


- pred0: without any screening mechanism for impossible questions
- pred1: torch.max(start_index).item() > 6 OR torch.max(end_index).item() > 6
- pred2: torch.max(start_index).item() > 6.5 AND torch.max(end_index).item() > 6.5
- pred3: torch.max(start_index).item() > 6.5 OR torch.max(end_index).item() > 6.5
- pred4: torch.max(start_index).item() > 7 OR torch.max(end_index).item() > 7.5
"""

with open("correct_answrs.json", "r") as fp:
  correct_answers = json.load(fp)

with open("answr_predictions0.json", "r") as fp0:
  predictions0 = json.load(fp0)

with open("answr_predictions1.json", "r") as fp1:
  predictions1 = json.load(fp1)

with open("answr_predictions2.json", "r") as fp2:
  predictions2 = json.load(fp2)

with open("answr_predictions3.json", "r") as fp3:
  predictions3 = json.load(fp3)

with open("answr_predictions4.json", "r") as fp4:
  predictions4 = json.load(fp4)


print(correct_answers["56be85543aeaaa14008c9063"])
print(predictions1)
print(len(correct_answers))
print(len(predictions0))
print(len(predictions1))
print(len(predictions2))
print(len(predictions3))
print(len(predictions4))

"""# Accuracy Evaluation

predictions0
"""

exacts0, partial0 = 0, 0
exacts1, partial1 = 0, 0
exacts2, partial2 = 0, 0
exacts3, partial3 = 0, 0
exacts4, partial4 = 0, 0

for q_id in correct_answers:
  correct = correct_answers[q_id].lower()

  if correct == predictions0[q_id]:
    exacts0 += 1
    partial0 += 1
  else:
    partial0 += textdistance.jaro_winkler(correct, predictions0[q_id])
  
  if correct == predictions1[q_id]:
    exacts1 += 1
    partial1 += 1
  else:
    partial1 += textdistance.jaro_winkler(correct, predictions1[q_id])

  if correct == predictions2[q_id]:
    exacts2 += 1
    partial2 += 1
  else:
    partial2 += textdistance.jaro_winkler(correct, predictions2[q_id])

  if correct == predictions3[q_id]:
    exacts3 += 1
    partial3 += 1
  else:
    partial3 += textdistance.jaro_winkler(correct, predictions3[q_id])

  if correct == predictions4[q_id]:
    exacts4 += 1
    partial4 += 1
  else:
    partial4 += textdistance.jaro_winkler(correct, predictions4[q_id])

print("Prediction0: without any screening mechanism for impossible questions")
print("Exact match:", exacts0/2607)
print("Partial match:", partial0/2607)
print()

print("Prediction1: torch.max(start_index).item() > 6 OR torch.max(end_index).item() > 6")
print("Exact match:", exacts1/2607)
print("Partial match:", partial1/2607)
print()

print("Prediction2: torch.max(start_index).item() > 6.5 AND torch.max(end_index).item() > 6.5")
print("Exact match:", exacts2/2607)
print("Partial match:", partial2/2607)
print()

print("Prediction3: torch.max(start_index).item() > 6.5 OR torch.max(end_index).item() > 6.5")
print("Exact match:", exacts3/2607)
print("Partial match:", partial3/2607)
print()

print("Prediction4: torch.max(start_index).item() > 7 OR torch.max(end_index).item() > 7.5")
print("Exact match:", exacts4/2607)
print("Partial match:", partial4/2607)

"""## TESTS"""

with open("correct_tests.json", "r") as fpt:
  test_corrects = json.load(fpt)

with open("answr_test1.json", "r") as fpt1:
  test_answers1 = json.load(fpt1)

print(len(test_corrects))

texacts1 = 0
tpartial1 = 0

for q_id in test_corrects:
  correct = test_corrects[q_id].lower()

  if correct == test_answers1[q_id]:
    texacts1 += 1
    tpartial1 += 1
  else:
    tpartial1 += textdistance.jaro_winkler(correct, test_answers1[q_id])

print(texacts1/5213, tpartial1/5213)